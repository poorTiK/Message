//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Message.UserServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ServerWCF.Model")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BioField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Message.UserServiceReference.BaseContact> ContactsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Message.UserServiceReference.UserToUserContact> OwnersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Image UiImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnreadMessageCountField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bio {
            get {
                return this.BioField;
            }
            set {
                if ((object.ReferenceEquals(this.BioField, value) != true)) {
                    this.BioField = value;
                    this.RaisePropertyChanged("Bio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Message.UserServiceReference.BaseContact> Contacts {
            get {
                return this.ContactsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactsField, value) != true)) {
                    this.ContactsField = value;
                    this.RaisePropertyChanged("Contacts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageId {
            get {
                return this.ImageIdField;
            }
            set {
                if ((this.ImageIdField.Equals(value) != true)) {
                    this.ImageIdField = value;
                    this.RaisePropertyChanged("ImageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Message.UserServiceReference.UserToUserContact> Owners {
            get {
                return this.OwnersField;
            }
            set {
                if ((object.ReferenceEquals(this.OwnersField, value) != true)) {
                    this.OwnersField = value;
                    this.RaisePropertyChanged("Owners");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Image UiImage {
            get {
                return this.UiImageField;
            }
            set {
                if ((object.ReferenceEquals(this.UiImageField, value) != true)) {
                    this.UiImageField = value;
                    this.RaisePropertyChanged("UiImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnreadMessageCount {
            get {
                return this.UnreadMessageCountField;
            }
            set {
                if ((this.UnreadMessageCountField.Equals(value) != true)) {
                    this.UnreadMessageCountField = value;
                    this.RaisePropertyChanged("UnreadMessageCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseContact", Namespace="http://schemas.datacontract.org/2004/07/ServerWCF.Model.Contacts")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Message.UserServiceReference.UserToUserContact))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Message.UserServiceReference.UserToGroupContact))]
    public partial class BaseContact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Message.UserServiceReference.User UserOwnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserOwnerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Message.UserServiceReference.User UserOwner {
            get {
                return this.UserOwnerField;
            }
            set {
                if ((object.ReferenceEquals(this.UserOwnerField, value) != true)) {
                    this.UserOwnerField = value;
                    this.RaisePropertyChanged("UserOwner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserOwnerId {
            get {
                return this.UserOwnerIdField;
            }
            set {
                if ((this.UserOwnerIdField.Equals(value) != true)) {
                    this.UserOwnerIdField = value;
                    this.RaisePropertyChanged("UserOwnerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserToUserContact", Namespace="http://schemas.datacontract.org/2004/07/ServerWCF.Model.Contacts")]
    [System.SerializableAttribute()]
    public partial class UserToUserContact : Message.UserServiceReference.BaseContact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Message.UserServiceReference.User UserOwnedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserOwnedIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Message.UserServiceReference.User UserOwned {
            get {
                return this.UserOwnedField;
            }
            set {
                if ((object.ReferenceEquals(this.UserOwnedField, value) != true)) {
                    this.UserOwnedField = value;
                    this.RaisePropertyChanged("UserOwned");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserOwnedId {
            get {
                return this.UserOwnedIdField;
            }
            set {
                if ((this.UserOwnedIdField.Equals(value) != true)) {
                    this.UserOwnedIdField = value;
                    this.RaisePropertyChanged("UserOwnedId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserToGroupContact", Namespace="http://schemas.datacontract.org/2004/07/ServerWCF.Model.Contacts")]
    [System.SerializableAttribute()]
    public partial class UserToGroupContact : Message.UserServiceReference.BaseContact {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Message.UserServiceReference.ChatGroup ChatGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChatGroupIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Message.UserServiceReference.ChatGroup ChatGroup {
            get {
                return this.ChatGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.ChatGroupField, value) != true)) {
                    this.ChatGroupField = value;
                    this.RaisePropertyChanged("ChatGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChatGroupId {
            get {
                return this.ChatGroupIdField;
            }
            set {
                if ((this.ChatGroupIdField.Equals(value) != true)) {
                    this.ChatGroupIdField = value;
                    this.RaisePropertyChanged("ChatGroupId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatGroup", Namespace="http://schemas.datacontract.org/2004/07/ServerWCF.Model")]
    [System.SerializableAttribute()]
    public partial class ChatGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<Message.UserServiceReference.UserToGroupContact> ParticipantsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageId {
            get {
                return this.ImageIdField;
            }
            set {
                if ((this.ImageIdField.Equals(value) != true)) {
                    this.ImageIdField = value;
                    this.RaisePropertyChanged("ImageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<Message.UserServiceReference.UserToGroupContact> Participants {
            get {
                return this.ParticipantsField;
            }
            set {
                if ((object.ReferenceEquals(this.ParticipantsField, value) != true)) {
                    this.ParticipantsField = value;
                    this.RaisePropertyChanged("Participants");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UiInfo", Namespace="http://schemas.datacontract.org/2004/07/ServerWCF.Model.UiInfo")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Message.UserServiceReference.UserUiInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Message.UserServiceReference.ChatGroupUiInfo))]
    public partial class UiInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSelectedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Image UiImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UniqueNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageId {
            get {
                return this.ImageIdField;
            }
            set {
                if ((this.ImageIdField.Equals(value) != true)) {
                    this.ImageIdField = value;
                    this.RaisePropertyChanged("ImageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSelected {
            get {
                return this.IsSelectedField;
            }
            set {
                if ((this.IsSelectedField.Equals(value) != true)) {
                    this.IsSelectedField = value;
                    this.RaisePropertyChanged("IsSelected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Image UiImage {
            get {
                return this.UiImageField;
            }
            set {
                if ((object.ReferenceEquals(this.UiImageField, value) != true)) {
                    this.UiImageField = value;
                    this.RaisePropertyChanged("UiImage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UniqueName {
            get {
                return this.UniqueNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UniqueNameField, value) != true)) {
                    this.UniqueNameField = value;
                    this.RaisePropertyChanged("UniqueName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserUiInfo", Namespace="http://schemas.datacontract.org/2004/07/ServerWCF.Model.UiInfo")]
    [System.SerializableAttribute()]
    public partial class UserUiInfo : Message.UserServiceReference.UiInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatGroupUiInfo", Namespace="http://schemas.datacontract.org/2004/07/ServerWCF.Model.UiInfo")]
    [System.SerializableAttribute()]
    public partial class ChatGroupUiInfo : Message.UserServiceReference.UiInfo {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChatGroupIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChatGroupId {
            get {
                return this.ChatGroupIdField;
            }
            set {
                if ((this.ChatGroupIdField.Equals(value) != true)) {
                    this.ChatGroupIdField = value;
                    this.RaisePropertyChanged("ChatGroupId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ApplicationSettings", Namespace="http://schemas.datacontract.org/2004/07/ServerWCF.Model")]
    [System.SerializableAttribute()]
    public partial class ApplicationSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowNotificationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LanguageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ThemeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Message.UserServiceReference.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WindowSizeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowNotifications {
            get {
                return this.AllowNotificationsField;
            }
            set {
                if ((this.AllowNotificationsField.Equals(value) != true)) {
                    this.AllowNotificationsField = value;
                    this.RaisePropertyChanged("AllowNotifications");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Language {
            get {
                return this.LanguageField;
            }
            set {
                if ((object.ReferenceEquals(this.LanguageField, value) != true)) {
                    this.LanguageField = value;
                    this.RaisePropertyChanged("Language");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Theme {
            get {
                return this.ThemeField;
            }
            set {
                if ((object.ReferenceEquals(this.ThemeField, value) != true)) {
                    this.ThemeField = value;
                    this.RaisePropertyChanged("Theme");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Message.UserServiceReference.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WindowSize {
            get {
                return this.WindowSizeField;
            }
            set {
                if ((this.WindowSizeField.Equals(value) != true)) {
                    this.WindowSizeField = value;
                    this.RaisePropertyChanged("WindowSize");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMessage", Namespace="http://schemas.datacontract.org/2004/07/ServerWCF.Model.Messages")]
    [System.SerializableAttribute()]
    public partial class GroupMessage : Message.UserServiceReference.BaseMessage {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChatGroupIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChatGroupId {
            get {
                return this.ChatGroupIdField;
            }
            set {
                if ((this.ChatGroupIdField.Equals(value) != true)) {
                    this.ChatGroupIdField = value;
                    this.RaisePropertyChanged("ChatGroupId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderName {
            get {
                return this.SenderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderNameField, value) != true)) {
                    this.SenderNameField = value;
                    this.RaisePropertyChanged("SenderName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseMessage", Namespace="http://schemas.datacontract.org/2004/07/ServerWCF.Model.Messages")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Message.UserServiceReference.UserMessage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Message.UserServiceReference.GroupMessage))]
    public partial class BaseMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Message.UserServiceReference.ChatFile ChatFileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ChatFileIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateOfSendingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Message.UserServiceReference.User SenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SenderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Message.UserServiceReference.ChatFile ChatFile {
            get {
                return this.ChatFileField;
            }
            set {
                if ((object.ReferenceEquals(this.ChatFileField, value) != true)) {
                    this.ChatFileField = value;
                    this.RaisePropertyChanged("ChatFile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ChatFileId {
            get {
                return this.ChatFileIdField;
            }
            set {
                if ((this.ChatFileIdField.Equals(value) != true)) {
                    this.ChatFileIdField = value;
                    this.RaisePropertyChanged("ChatFileId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateOfSending {
            get {
                return this.DateOfSendingField;
            }
            set {
                if ((this.DateOfSendingField.Equals(value) != true)) {
                    this.DateOfSendingField = value;
                    this.RaisePropertyChanged("DateOfSending");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Message.UserServiceReference.User Sender {
            get {
                return this.SenderField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderField, value) != true)) {
                    this.SenderField = value;
                    this.RaisePropertyChanged("Sender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SenderId {
            get {
                return this.SenderIdField;
            }
            set {
                if ((this.SenderIdField.Equals(value) != true)) {
                    this.SenderIdField = value;
                    this.RaisePropertyChanged("SenderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatFile", Namespace="http://schemas.datacontract.org/2004/07/ServerWCF.Model")]
    [System.SerializableAttribute()]
    public partial class ChatFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExtensionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] SourceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Extension {
            get {
                return this.ExtensionField;
            }
            set {
                if ((object.ReferenceEquals(this.ExtensionField, value) != true)) {
                    this.ExtensionField = value;
                    this.RaisePropertyChanged("Extension");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Source {
            get {
                return this.SourceField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceField, value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserMessage", Namespace="http://schemas.datacontract.org/2004/07/ServerWCF.Model")]
    [System.SerializableAttribute()]
    public partial class UserMessage : Message.UserServiceReference.BaseMessage {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ReceiverIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ReceiverId {
            get {
                return this.ReceiverIdField;
            }
            set {
                if ((this.ReceiverIdField.Equals(value) != true)) {
                    this.ReceiverIdField = value;
                    this.RaisePropertyChanged("ReceiverId");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserServiceReference.IUserService", CallbackContract=typeof(Message.UserServiceReference.IUserServiceCallback))]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllUsers", ReplyAction="http://tempuri.org/IUserService/GetAllUsersResponse")]
        System.Collections.Generic.List<Message.UserServiceReference.User> GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllUsers", ReplyAction="http://tempuri.org/IUserService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.User>> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllUsersUiInfo", ReplyAction="http://tempuri.org/IUserService/GetAllUsersUiInfoResponse")]
        System.Collections.Generic.List<Message.UserServiceReference.UiInfo> GetAllUsersUiInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllUsersUiInfo", ReplyAction="http://tempuri.org/IUserService/GetAllUsersUiInfoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.UiInfo>> GetAllUsersUiInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddOrUpdateUser", ReplyAction="http://tempuri.org/IUserService/AddOrUpdateUserResponse")]
        string AddOrUpdateUser(Message.UserServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddOrUpdateUser", ReplyAction="http://tempuri.org/IUserService/AddOrUpdateUserResponse")]
        System.Threading.Tasks.Task<string> AddOrUpdateUserAsync(Message.UserServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUser", ReplyAction="http://tempuri.org/IUserService/GetUserResponse")]
        Message.UserServiceReference.User GetUser(string login, byte[] password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUser", ReplyAction="http://tempuri.org/IUserService/GetUserResponse")]
        System.Threading.Tasks.Task<Message.UserServiceReference.User> GetUserAsync(string login, byte[] password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserByEmail", ReplyAction="http://tempuri.org/IUserService/GetUserByEmailResponse")]
        Message.UserServiceReference.User GetUserByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserByEmail", ReplyAction="http://tempuri.org/IUserService/GetUserByEmailResponse")]
        System.Threading.Tasks.Task<Message.UserServiceReference.User> GetUserByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/FindNewUsersByLogin", ReplyAction="http://tempuri.org/IUserService/FindNewUsersByLoginResponse")]
        System.Collections.Generic.List<Message.UserServiceReference.User> FindNewUsersByLogin(int userId, string keyWorkForLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/FindNewUsersByLogin", ReplyAction="http://tempuri.org/IUserService/FindNewUsersByLoginResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.User>> FindNewUsersByLoginAsync(int userId, string keyWorkForLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/FindNewUsersUiUnfoByLogin", ReplyAction="http://tempuri.org/IUserService/FindNewUsersUiUnfoByLoginResponse")]
        System.Collections.Generic.List<Message.UserServiceReference.UiInfo> FindNewUsersUiUnfoByLogin(int userId, string keyWorkForLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/FindNewUsersUiUnfoByLogin", ReplyAction="http://tempuri.org/IUserService/FindNewUsersUiUnfoByLoginResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.UiInfo>> FindNewUsersUiUnfoByLoginAsync(int userId, string keyWorkForLogin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserByLogin", ReplyAction="http://tempuri.org/IUserService/GetUserByLoginResponse")]
        Message.UserServiceReference.User GetUserByLogin(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserByLogin", ReplyAction="http://tempuri.org/IUserService/GetUserByLoginResponse")]
        System.Threading.Tasks.Task<Message.UserServiceReference.User> GetUserByLoginAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserById", ReplyAction="http://tempuri.org/IUserService/GetUserByIdResponse")]
        Message.UserServiceReference.User GetUserById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserById", ReplyAction="http://tempuri.org/IUserService/GetUserByIdResponse")]
        System.Threading.Tasks.Task<Message.UserServiceReference.User> GetUserByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddOrUpdateChatGroup", ReplyAction="http://tempuri.org/IUserService/AddOrUpdateChatGroupResponse")]
        string AddOrUpdateChatGroup(Message.UserServiceReference.ChatGroup chatGroupToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddOrUpdateChatGroup", ReplyAction="http://tempuri.org/IUserService/AddOrUpdateChatGroupResponse")]
        System.Threading.Tasks.Task<string> AddOrUpdateChatGroupAsync(Message.UserServiceReference.ChatGroup chatGroupToAdd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetChatGroup", ReplyAction="http://tempuri.org/IUserService/GetChatGroupResponse")]
        Message.UserServiceReference.ChatGroup GetChatGroup(string chatGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetChatGroup", ReplyAction="http://tempuri.org/IUserService/GetChatGroupResponse")]
        System.Threading.Tasks.Task<Message.UserServiceReference.ChatGroup> GetChatGroupAsync(string chatGroupName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUserToUserContact", ReplyAction="http://tempuri.org/IUserService/AddUserToUserContactResponse")]
        bool AddUserToUserContact(int id_owner, int id_owned);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUserToUserContact", ReplyAction="http://tempuri.org/IUserService/AddUserToUserContactResponse")]
        System.Threading.Tasks.Task<bool> AddUserToUserContactAsync(int id_owner, int id_owned);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUserToChatGroupContact", ReplyAction="http://tempuri.org/IUserService/AddUserToChatGroupContactResponse")]
        bool AddUserToChatGroupContact(int chatGroupId, int participantId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUserToChatGroupContact", ReplyAction="http://tempuri.org/IUserService/AddUserToChatGroupContactResponse")]
        System.Threading.Tasks.Task<bool> AddUserToChatGroupContactAsync(int chatGroupId, int participantId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RemoveUserToUserContact", ReplyAction="http://tempuri.org/IUserService/RemoveUserToUserContactResponse")]
        bool RemoveUserToUserContact(int ownerId, int ownedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RemoveUserToUserContact", ReplyAction="http://tempuri.org/IUserService/RemoveUserToUserContactResponse")]
        System.Threading.Tasks.Task<bool> RemoveUserToUserContactAsync(int ownerId, int ownedId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RemoveUserToChatGroupContact", ReplyAction="http://tempuri.org/IUserService/RemoveUserToChatGroupContactResponse")]
        bool RemoveUserToChatGroupContact(int chatGroupId, int participantId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/RemoveUserToChatGroupContact", ReplyAction="http://tempuri.org/IUserService/RemoveUserToChatGroupContactResponse")]
        System.Threading.Tasks.Task<bool> RemoveUserToChatGroupContactAsync(int chatGroupId, int participantId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllUsersContacts", ReplyAction="http://tempuri.org/IUserService/GetAllUsersContactsResponse")]
        System.Collections.Generic.List<Message.UserServiceReference.User> GetAllUsersContacts(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllUsersContacts", ReplyAction="http://tempuri.org/IUserService/GetAllUsersContactsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.User>> GetAllUsersContactsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllChatGroupsContacts", ReplyAction="http://tempuri.org/IUserService/GetAllChatGroupsContactsResponse")]
        System.Collections.Generic.List<Message.UserServiceReference.ChatGroup> GetAllChatGroupsContacts(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllChatGroupsContacts", ReplyAction="http://tempuri.org/IUserService/GetAllChatGroupsContactsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.ChatGroup>> GetAllChatGroupsContactsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetGroupParticipants", ReplyAction="http://tempuri.org/IUserService/GetGroupParticipantsResponse")]
        System.Collections.Generic.List<Message.UserServiceReference.UiInfo> GetGroupParticipants(int chatGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetGroupParticipants", ReplyAction="http://tempuri.org/IUserService/GetGroupParticipantsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.UiInfo>> GetGroupParticipantsAsync(int chatGroupId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllContactsUiInfo", ReplyAction="http://tempuri.org/IUserService/GetAllContactsUiInfoResponse")]
        System.Collections.Generic.List<Message.UserServiceReference.UiInfo> GetAllContactsUiInfo(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllContactsUiInfo", ReplyAction="http://tempuri.org/IUserService/GetAllContactsUiInfoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.UiInfo>> GetAllContactsUiInfoAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsExistsInContacts", ReplyAction="http://tempuri.org/IUserService/IsExistsInContactsResponse")]
        bool IsExistsInContacts(int id_owner, int id_owned);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/IsExistsInContacts", ReplyAction="http://tempuri.org/IUserService/IsExistsInContactsResponse")]
        System.Threading.Tasks.Task<bool> IsExistsInContactsAsync(int id_owner, int id_owned);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAppSettings", ReplyAction="http://tempuri.org/IUserService/GetAppSettingsResponse")]
        Message.UserServiceReference.ApplicationSettings GetAppSettings(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAppSettings", ReplyAction="http://tempuri.org/IUserService/GetAppSettingsResponse")]
        System.Threading.Tasks.Task<Message.UserServiceReference.ApplicationSettings> GetAppSettingsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/SaveAppSettings", ReplyAction="http://tempuri.org/IUserService/SaveAppSettingsResponse")]
        bool SaveAppSettings(Message.UserServiceReference.ApplicationSettings appSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/SaveAppSettings", ReplyAction="http://tempuri.org/IUserService/SaveAppSettingsResponse")]
        System.Threading.Tasks.Task<bool> SaveAppSettingsAsync(Message.UserServiceReference.ApplicationSettings appSettings);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/OnUserCame")]
        void OnUserCame(int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/OnUserCame")]
        System.Threading.Tasks.Task OnUserCameAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/OnUserLeave")]
        void OnUserLeave(int userId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/OnUserLeave")]
        System.Threading.Tasks.Task OnUserLeaveAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetGroupMessages", ReplyAction="http://tempuri.org/IUserService/GetGroupMessagesResponse")]
        System.Collections.Generic.List<Message.UserServiceReference.GroupMessage> GetGroupMessages(int chatGroupId, int limin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetGroupMessages", ReplyAction="http://tempuri.org/IUserService/GetGroupMessagesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.GroupMessage>> GetGroupMessagesAsync(int chatGroupId, int limin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserMessages", ReplyAction="http://tempuri.org/IUserService/GetUserMessagesResponse")]
        System.Collections.Generic.List<Message.UserServiceReference.UserMessage> GetUserMessages(int sender, int receiver, int limin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUserMessages", ReplyAction="http://tempuri.org/IUserService/GetUserMessagesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.UserMessage>> GetUserMessagesAsync(int sender, int receiver, int limin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/FindMessage", ReplyAction="http://tempuri.org/IUserService/FindMessageResponse")]
        System.Collections.Generic.List<Message.UserServiceReference.BaseMessage> FindMessage(string keyWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/FindMessage", ReplyAction="http://tempuri.org/IUserService/FindMessageResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.BaseMessage>> FindMessageAsync(string keyWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetLastMessage", ReplyAction="http://tempuri.org/IUserService/GetLastMessageResponse")]
        Message.UserServiceReference.BaseMessage GetLastMessage();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetLastMessage", ReplyAction="http://tempuri.org/IUserService/GetLastMessageResponse")]
        System.Threading.Tasks.Task<Message.UserServiceReference.BaseMessage> GetLastMessageAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/SendMessage")]
        void SendMessage(Message.UserServiceReference.BaseMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(Message.UserServiceReference.BaseMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/EditMessage")]
        void EditMessage(Message.UserServiceReference.BaseMessage editedMessage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/EditMessage")]
        System.Threading.Tasks.Task EditMessageAsync(Message.UserServiceReference.BaseMessage editedMessage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/RemoveMessage")]
        void RemoveMessage(Message.UserServiceReference.BaseMessage removedMessage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/RemoveMessage")]
        System.Threading.Tasks.Task RemoveMessageAsync(Message.UserServiceReference.BaseMessage removedMessage);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/UserLeave")]
        void UserLeave(Message.UserServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/UserCame")]
        void UserCame(Message.UserServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/ReceiveMessage")]
        void ReceiveMessage(Message.UserServiceReference.BaseMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/OnMessageRemoved")]
        void OnMessageRemoved(Message.UserServiceReference.BaseMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/OnMessageEdited")]
        void OnMessageEdited(Message.UserServiceReference.BaseMessage message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/OnNewContactAdded")]
        void OnNewContactAdded(Message.UserServiceReference.UiInfo newContact);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/OnContactRemoved")]
        void OnContactRemoved(Message.UserServiceReference.UiInfo newContact);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/OnEntityChanged")]
        void OnEntityChanged(Message.UserServiceReference.UiInfo changedEntity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : Message.UserServiceReference.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.DuplexClientBase<Message.UserServiceReference.IUserService>, Message.UserServiceReference.IUserService {
        
        public UserServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public UserServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public UserServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<Message.UserServiceReference.User> GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.User>> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public System.Collections.Generic.List<Message.UserServiceReference.UiInfo> GetAllUsersUiInfo() {
            return base.Channel.GetAllUsersUiInfo();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.UiInfo>> GetAllUsersUiInfoAsync() {
            return base.Channel.GetAllUsersUiInfoAsync();
        }
        
        public string AddOrUpdateUser(Message.UserServiceReference.User user) {
            return base.Channel.AddOrUpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<string> AddOrUpdateUserAsync(Message.UserServiceReference.User user) {
            return base.Channel.AddOrUpdateUserAsync(user);
        }
        
        public Message.UserServiceReference.User GetUser(string login, byte[] password) {
            return base.Channel.GetUser(login, password);
        }
        
        public System.Threading.Tasks.Task<Message.UserServiceReference.User> GetUserAsync(string login, byte[] password) {
            return base.Channel.GetUserAsync(login, password);
        }
        
        public Message.UserServiceReference.User GetUserByEmail(string email) {
            return base.Channel.GetUserByEmail(email);
        }
        
        public System.Threading.Tasks.Task<Message.UserServiceReference.User> GetUserByEmailAsync(string email) {
            return base.Channel.GetUserByEmailAsync(email);
        }
        
        public System.Collections.Generic.List<Message.UserServiceReference.User> FindNewUsersByLogin(int userId, string keyWorkForLogin) {
            return base.Channel.FindNewUsersByLogin(userId, keyWorkForLogin);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.User>> FindNewUsersByLoginAsync(int userId, string keyWorkForLogin) {
            return base.Channel.FindNewUsersByLoginAsync(userId, keyWorkForLogin);
        }
        
        public System.Collections.Generic.List<Message.UserServiceReference.UiInfo> FindNewUsersUiUnfoByLogin(int userId, string keyWorkForLogin) {
            return base.Channel.FindNewUsersUiUnfoByLogin(userId, keyWorkForLogin);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.UiInfo>> FindNewUsersUiUnfoByLoginAsync(int userId, string keyWorkForLogin) {
            return base.Channel.FindNewUsersUiUnfoByLoginAsync(userId, keyWorkForLogin);
        }
        
        public Message.UserServiceReference.User GetUserByLogin(string login) {
            return base.Channel.GetUserByLogin(login);
        }
        
        public System.Threading.Tasks.Task<Message.UserServiceReference.User> GetUserByLoginAsync(string login) {
            return base.Channel.GetUserByLoginAsync(login);
        }
        
        public Message.UserServiceReference.User GetUserById(int id) {
            return base.Channel.GetUserById(id);
        }
        
        public System.Threading.Tasks.Task<Message.UserServiceReference.User> GetUserByIdAsync(int id) {
            return base.Channel.GetUserByIdAsync(id);
        }
        
        public string AddOrUpdateChatGroup(Message.UserServiceReference.ChatGroup chatGroupToAdd) {
            return base.Channel.AddOrUpdateChatGroup(chatGroupToAdd);
        }
        
        public System.Threading.Tasks.Task<string> AddOrUpdateChatGroupAsync(Message.UserServiceReference.ChatGroup chatGroupToAdd) {
            return base.Channel.AddOrUpdateChatGroupAsync(chatGroupToAdd);
        }
        
        public Message.UserServiceReference.ChatGroup GetChatGroup(string chatGroupName) {
            return base.Channel.GetChatGroup(chatGroupName);
        }
        
        public System.Threading.Tasks.Task<Message.UserServiceReference.ChatGroup> GetChatGroupAsync(string chatGroupName) {
            return base.Channel.GetChatGroupAsync(chatGroupName);
        }
        
        public bool AddUserToUserContact(int id_owner, int id_owned) {
            return base.Channel.AddUserToUserContact(id_owner, id_owned);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserToUserContactAsync(int id_owner, int id_owned) {
            return base.Channel.AddUserToUserContactAsync(id_owner, id_owned);
        }
        
        public bool AddUserToChatGroupContact(int chatGroupId, int participantId) {
            return base.Channel.AddUserToChatGroupContact(chatGroupId, participantId);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserToChatGroupContactAsync(int chatGroupId, int participantId) {
            return base.Channel.AddUserToChatGroupContactAsync(chatGroupId, participantId);
        }
        
        public bool RemoveUserToUserContact(int ownerId, int ownedId) {
            return base.Channel.RemoveUserToUserContact(ownerId, ownedId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserToUserContactAsync(int ownerId, int ownedId) {
            return base.Channel.RemoveUserToUserContactAsync(ownerId, ownedId);
        }
        
        public bool RemoveUserToChatGroupContact(int chatGroupId, int participantId) {
            return base.Channel.RemoveUserToChatGroupContact(chatGroupId, participantId);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveUserToChatGroupContactAsync(int chatGroupId, int participantId) {
            return base.Channel.RemoveUserToChatGroupContactAsync(chatGroupId, participantId);
        }
        
        public System.Collections.Generic.List<Message.UserServiceReference.User> GetAllUsersContacts(int userId) {
            return base.Channel.GetAllUsersContacts(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.User>> GetAllUsersContactsAsync(int userId) {
            return base.Channel.GetAllUsersContactsAsync(userId);
        }
        
        public System.Collections.Generic.List<Message.UserServiceReference.ChatGroup> GetAllChatGroupsContacts(int userId) {
            return base.Channel.GetAllChatGroupsContacts(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.ChatGroup>> GetAllChatGroupsContactsAsync(int userId) {
            return base.Channel.GetAllChatGroupsContactsAsync(userId);
        }
        
        public System.Collections.Generic.List<Message.UserServiceReference.UiInfo> GetGroupParticipants(int chatGroupId) {
            return base.Channel.GetGroupParticipants(chatGroupId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.UiInfo>> GetGroupParticipantsAsync(int chatGroupId) {
            return base.Channel.GetGroupParticipantsAsync(chatGroupId);
        }
        
        public System.Collections.Generic.List<Message.UserServiceReference.UiInfo> GetAllContactsUiInfo(int id) {
            return base.Channel.GetAllContactsUiInfo(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.UiInfo>> GetAllContactsUiInfoAsync(int id) {
            return base.Channel.GetAllContactsUiInfoAsync(id);
        }
        
        public bool IsExistsInContacts(int id_owner, int id_owned) {
            return base.Channel.IsExistsInContacts(id_owner, id_owned);
        }
        
        public System.Threading.Tasks.Task<bool> IsExistsInContactsAsync(int id_owner, int id_owned) {
            return base.Channel.IsExistsInContactsAsync(id_owner, id_owned);
        }
        
        public Message.UserServiceReference.ApplicationSettings GetAppSettings(int userId) {
            return base.Channel.GetAppSettings(userId);
        }
        
        public System.Threading.Tasks.Task<Message.UserServiceReference.ApplicationSettings> GetAppSettingsAsync(int userId) {
            return base.Channel.GetAppSettingsAsync(userId);
        }
        
        public bool SaveAppSettings(Message.UserServiceReference.ApplicationSettings appSettings) {
            return base.Channel.SaveAppSettings(appSettings);
        }
        
        public System.Threading.Tasks.Task<bool> SaveAppSettingsAsync(Message.UserServiceReference.ApplicationSettings appSettings) {
            return base.Channel.SaveAppSettingsAsync(appSettings);
        }
        
        public void OnUserCame(int userId) {
            base.Channel.OnUserCame(userId);
        }
        
        public System.Threading.Tasks.Task OnUserCameAsync(int userId) {
            return base.Channel.OnUserCameAsync(userId);
        }
        
        public void OnUserLeave(int userId) {
            base.Channel.OnUserLeave(userId);
        }
        
        public System.Threading.Tasks.Task OnUserLeaveAsync(int userId) {
            return base.Channel.OnUserLeaveAsync(userId);
        }
        
        public System.Collections.Generic.List<Message.UserServiceReference.GroupMessage> GetGroupMessages(int chatGroupId, int limin) {
            return base.Channel.GetGroupMessages(chatGroupId, limin);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.GroupMessage>> GetGroupMessagesAsync(int chatGroupId, int limin) {
            return base.Channel.GetGroupMessagesAsync(chatGroupId, limin);
        }
        
        public System.Collections.Generic.List<Message.UserServiceReference.UserMessage> GetUserMessages(int sender, int receiver, int limin) {
            return base.Channel.GetUserMessages(sender, receiver, limin);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.UserMessage>> GetUserMessagesAsync(int sender, int receiver, int limin) {
            return base.Channel.GetUserMessagesAsync(sender, receiver, limin);
        }
        
        public System.Collections.Generic.List<Message.UserServiceReference.BaseMessage> FindMessage(string keyWord) {
            return base.Channel.FindMessage(keyWord);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Message.UserServiceReference.BaseMessage>> FindMessageAsync(string keyWord) {
            return base.Channel.FindMessageAsync(keyWord);
        }
        
        public Message.UserServiceReference.BaseMessage GetLastMessage() {
            return base.Channel.GetLastMessage();
        }
        
        public System.Threading.Tasks.Task<Message.UserServiceReference.BaseMessage> GetLastMessageAsync() {
            return base.Channel.GetLastMessageAsync();
        }
        
        public void SendMessage(Message.UserServiceReference.BaseMessage message) {
            base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(Message.UserServiceReference.BaseMessage message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        public void EditMessage(Message.UserServiceReference.BaseMessage editedMessage) {
            base.Channel.EditMessage(editedMessage);
        }
        
        public System.Threading.Tasks.Task EditMessageAsync(Message.UserServiceReference.BaseMessage editedMessage) {
            return base.Channel.EditMessageAsync(editedMessage);
        }
        
        public void RemoveMessage(Message.UserServiceReference.BaseMessage removedMessage) {
            base.Channel.RemoveMessage(removedMessage);
        }
        
        public System.Threading.Tasks.Task RemoveMessageAsync(Message.UserServiceReference.BaseMessage removedMessage) {
            return base.Channel.RemoveMessageAsync(removedMessage);
        }
    }
}
